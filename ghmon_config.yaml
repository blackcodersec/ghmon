# ghmon-cli Configuration File
# This file configures the behavior of the ghmon-cli secret scanning tool

# General application settings
general:
  log_level: INFO # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
  output_dir: ./scan_results # Directory for scan results (relative paths recommended)
  api_concurrency: 3 # Number of parallel API requests (1-20)

# GitHub configuration
github:
  enabled: true
  api_url: https://api.github.com
  tokens:
    # GitHub Personal Access Tokens (ghp_...)
    # Replace with your actual GitHub tokens
    # Generate tokens at: https://github.com/settings/tokens
    # Required scopes: repo (for private repos) or public_repo (for public repos only)
    - "YOUR_GITHUB_TOKEN_1_HERE"
    - "YOUR_GITHUB_TOKEN_2_HERE"
    # Add more tokens as needed for rate limit distribution

# GitLab configuration
gitlab:
  enabled: false
  api_url: https://gitlab.com/api/v4
  tokens:
    # GitLab Personal Access Tokens (glpat-...)
    # Replace with your actual GitLab tokens
    # Generate tokens at: https://gitlab.com/-/profile/personal_access_tokens
    # Required scopes: read_api, read_repository
    - "YOUR_GITLAB_TOKEN_HERE"

# Notification settings
notifications:
  discord:
    enabled: false # Set to true and configure webhook_url to enable Discord notifications
    webhook_url: "YOUR_DISCORD_WEBHOOK_URL_HERE"
    # To get a Discord webhook URL:
    # 1. Go to your Discord server settings
    # 2. Navigate to Integrations > Webhooks
    # 3. Create a new webhook and copy the URL
  telegram:
    enabled: false # Set to true and configure bot_token/chat_id to enable Telegram notifications
    bot_token: "YOUR_TELEGRAM_BOT_TOKEN_HERE"
    chat_id: "YOUR_TELEGRAM_CHAT_ID_HERE"
    # To get Telegram credentials:
    # 1. Create a bot by messaging @BotFather on Telegram
    # 2. Get your chat ID by messaging @userinfobot
    # 3. Replace the placeholders above with your actual values

# Operational settings
operation:
  scan_interval: 21600 # 6 hours between monitor cycles (in seconds)
  max_commits_for_full_extraction: 30000 # Skip full extraction if repo has more commits
  scan_only_on_change: true # Only scan if repository has new commits
  max_repos_per_org: 0 # Maximum repositories to fetch per organization (0 = no limit)

  # Repository filtering options
  filtering:
    # Skip repositories that haven't been updated in X days (0 = no age limit)
    skip_repos_older_than_days: 0 # Disabled - scan all repos regardless of age

    # Include archived repositories in scans
    include_archived: false

    # Include forked repositories in scans
    include_forks: false

    # Minimum repository size in KB to scan (avoid empty repos)
    min_repo_size_kb: 10

    # Maximum repository size in MB to scan (avoid huge repos)
    max_repo_size_mb: 500

    # Minimum stars for public repositories
    min_stars_public: 0

    # Skip test/demo repositories
    skip_test_repos: false

    # Languages to prioritize (empty = all languages)
    priority_languages:

    # Languages to exclude from scanning
    exclude_languages:

    # Keywords that indicate high-priority repositories
    priority_keywords:
      - api
      - backend
      - server
      - auth
      - database
      - config
      - infrastructure
      - deploy
      - secrets
      - vault
      - credentials

    # Keywords that indicate repositories to exclude
    exclude_keywords:

# Target repositories (currently unused by CLI)
targets: []

# TruffleHog scanner configuration
trufflehog:
  concurrency: 5 # Number of parallel scans (1-16)
  shallow_clone_timeout: 300 # Timeout for shallow clones (seconds)
  full_clone_timeout: 1200 # Timeout for full clones (seconds)
  shallow_scan_timeout: 600 # Timeout for shallow scans (seconds)
  full_scan_timeout: 1800 # Timeout for full scans (seconds)
  git_rev_list_timeout: 900 # Timeout for git rev-list operations (seconds)
  git_show_timeout: 180 # Timeout for git show operations (seconds)
  git_unpack_timeout: 900 # Timeout for git unpack operations (seconds)
  git_cat_file_info_timeout: 60
  git_cat_file_content_timeout: 180

  # Worker configuration for parallel processing
  restore_workers: 8 # Number of parallel workers for deleted file restoration (default: CPU cores / 2)
  extract_workers: 4 # Number of parallel workers for git object extraction (default: CPU cores / 2)
  unpack_workers: 4 # Number of parallel workers for pack file unpacking (default: CPU cores / 2)
  max_direct_extracts: 1000 # Maximum number of objects to extract directly (default: 1000)

organizations:
  - ORG_NAME